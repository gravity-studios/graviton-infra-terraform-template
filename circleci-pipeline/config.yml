version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.3.0
  aws-eks: circleci/aws-eks@2.1.1
  aws-cli: circleci/aws-cli@2.0
  kubernetes: circleci/kubernetes@1.3.0

jobs:
  patch_deployment:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      deployment-name:
        description: |
          Name of the Kubernetes Deployment
        type: string
      kubernetes-namespace:
        description: |
          Name of the Kubernetes namespace the deployment is deployed to
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: ${AWS_REGION}
      - run:
          command: |
            kubectl patch deployment << parameters.deployment-name >> -n << parameters.kubernetes-namespace >> -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"build\":\"${CIRCLE_SHA1}\"}}}}}}"
          name: Patch Deployment
  build_frontend:
    environment:
      CI: "false"
    docker:
      - image: circleci/node:14-browsers
    parameters:
      app-path:
        description: |
          Path to the frontend app
        type: string
      env-var-string:
        description: |
          Environment variables mapped per environment in a string
        type: string
    working_directory: ~/repo/<< parameters.app-path >>
    steps:
      - checkout:
          path: ~/repo
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          key: v1-dependencies-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Build
          command: << parameters.env-var-string >> npm run build
      - persist_to_workspace:
          root: .
          paths:
            - .
  deploy_frontend:
    working_directory: ~/repo/<< parameters.app-path >>
    executor: aws-cli/default
    parameters:
      app-path:
        description: |
          Path to the frontend app
        type: string
      bucket:
        description: |
          Name of the S3 bucket
        type: string
      cf_distro:
        description: |
          ID of the CloudFront distro
        type: string
    steps:
      - attach_workspace:
          at: .
      - aws-cli/install
      - run:
          name: Deploy to S3 bucket
          command: aws s3 sync build s3://<< parameters.bucket >> --delete --exact-timestamps;
      - run:
          name: Invalidate CloudFront
          command: aws cloudfront create-invalidation --distribution-id << parameters.cf_distro >> --paths "/*"
workflows:
  build-and-deploy-consumer:
    jobs:
      - build_frontend:
          name: "build-dev-frontend"
          app-path: "frontend" # Path to the frontend app inside the monorepo
          env-var-string: "REACT_APP_ENV_VAR_1=$DEV_REACT_APP_ENV_VAR_1 REACT_APP_ENV_VAR_2=$DEV_REACT_APP_ENV_VAR_2"
          filters:
            branches:
              only:
                - develop
      - deploy_frontend:
          name: "deploy-dev-frontend"
          app-path: "frontend" # Path to the frontend app inside the monorepo
          bucket: "dev.example.com"
          cf_distro: "${DEV_CONSUMER_CF_DISTRO}"
          filters:
            branches:
              only:
                - develop
          requires:
            - build-dev-frontend
  build-and-deploy-backend:
    jobs:
      - aws-ecr/build-and-push-image:
          name: "build-api-dev"
          filters:
            branches:
              only:
                - develop
          extra-build-args: "--build-arg OAUTH_KEYS=$DEV_OAUTH_KEYS"
          repo: "${DEV_AWS_ECR_REPO}"
          tag: "latest,${CIRCLE_SHA1}"
          path: "./backend/"
      - patch_deployment:
          name: "deploy-api-dev"
          filters:
            branches:
              only:
                - develop
          cluster-name: "${EKS_CLUSTER_NAME}"
          deployment-name: "example-api-dev"
          kubernetes-namespace: "dev-api"
          requires:
            - build-api-dev
